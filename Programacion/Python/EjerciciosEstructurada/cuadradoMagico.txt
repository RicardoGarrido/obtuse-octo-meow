#Un cuadrado mágico de orden n es una matriz cuadrada de dimensiones nxn 
#que contiene a los números naturales de 1 a n², tal que la suma de cualquier 
#columna, fila o diagonal principal es siempre la misma. El algoritmo para construir 
#el cuadrado mágico es:
#1.- El número 1 se coloca en la casilla central de la primera fila.
#2.- Cada número siguiente se coloca en la casilla correspondiente a la fila anterior y columna posterior.
#3.- Si el número es el siguiente a un múltiplo de n no se aplica la regla 2, sino que se coloca en la casilla de la fila posterior en la misma columna.
#4.- La fila anterior a la primera es la última.
#5.- La columna posterior a la última es la primera.
# Consulta la entrada en la Wikipedia para obtener ejemplos de casos test y estudiar el algoritmo para construir cuadrados mágicos de orden n impar.
def pedirDimensionesCubo():
	n = input('introduce una cantidad de columnas impar : ')
	while isinstance(n, int) != True:
		try:
			if int(n) % 2 != 0 
				n =int(n)
			else:
				n = input('por favor introduce una cantidad de columnas impar con un numero: ')
		except:
			n = input('por favor introduce una cantidad de columnas impar con un numero: ')
		else:
			pass
	return n
def crearEstructuraCubo(n):
	estructuraCubo=[]
	for fila in range(0,n):
		estructuraCubo.append(['n'])
		for columna in range(0,n-1):
			estructuraCubo[fila].append('n')
	return estructuraCubo
def rellenarCubo(estructuraCubo):
	if len(estructuraCubo) == 1:
		return [1]
	else:
		fila = 0
		columna = int(len(estructuraCubo)/2)
		for numero in range(1,(len(estructuraCubo)**2)+1):
			if numero % len(estructuraCubo) != 0:
				estructuraCubo[fila][columna]=numero
				fila -= 1
				columna += 1
				if fila == -1:
					fila=len(estructuraCubo)-1
				if columna == len(estructuraCubo):
					columna=0
			if numero % len(estructuraCubo) == 0:
				estructuraCubo[fila][columna]=numero
				fila += 1
				if fila == -1:
					fila=len(estructuraCubo)-1
				if columna == len(estructuraCubo):
					columna=0
		return estructuraCubo
#programa principal
n = pedirDimensionesCubo()
estructuraCubo = crearEstructuraCubo(n)
print(rellenarCubo(estructuraCubo))

#test
if __name__ == '__main__':
#test crearEstructuraCubo
test=[[4,[['n', 'n', 'n', 'n'], ['n', 'n', 'n', 'n'], ['n', 'n', 'n', 'n'], ['n', 'n', 'n', 'n']]],[1,[['n']]]]
def checkCrearEstructuraCubo(test):
	for miniTest in test:
		if crearEstructuraCubo(miniTest[0]) == miniTest[1]:
			print('OK')
		else:
			print('FAIL')
#test rellenarCubo
test=[[['n'],[1]],
[[['n','n','n'],['n','n','n'],['n','n','n']],[[8,1,6],[3,5,7],[4,9,2]]]]
def checkRellenarCubo(test):
	for miniTest in test:
		if rellenarCubo(miniTest[0]) == miniTest[1]:
			print('OK')
		else:
			print('FAIL')




